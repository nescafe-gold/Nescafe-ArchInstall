#!/usr/bin/env -S bash -e


# Enable logging.
LOGFILE="install.log"
exec &> >(tee -a "$LOGFILE")

# Script Variables

# /dev/id of drive you want to install arch on.  Leave blank to be prompted.
export DRIVE=""


country="United Kingdom"

EFI_SIZE=""

# Encrypt everything (except /boot).  Leave blank to disable.
ENCRYPT_DRIVE='TRUE'

# Passphrase used to encrypt the drive (leave blank to be prompted).
DRIVE_PASSPHRASE=''

# Root password (leave blank to be prompted).
ROOT_PASSWORD=''

# Main user to create (by default, added to wheel group, and others).
USER_NAME=''

# The main user's password (leave blank to be prompted).
USER_PASSWORD=''

# System timezone.
TIMEZONE='Europe/London'

# keymap (Lave blank to be prompted)
KEYMAP='uk'

# End of variables


############################################################
# Cosmetics (colours for text).
BOLD='\e[1m'
BRED='\e[91m'
BBLUE='\e[34m'  
BGREEN='\e[92m'
BYELLOW='\e[93m'
RESET='\e[0m'

# Pretty print (function).
info_print () {
    echo -e "${BOLD}${BGREEN}[ ${BYELLOW}•${BGREEN} ] $1${RESET}"
}

# Pretty print for input (function).
input_print () {
    echo -ne "${BOLD}${BYELLOW}[ ${BGREEN}•${BYELLOW} ] $1${RESET}"
}


set_root_password() {
    local password="$1"; shift

    echo -en "$password\n$password" | passwd
}


create_user() {
    local name="$1"; shift
    local password="$1"; shift

    useradd -m -G power,audio,wheel,storage,rfkill,network,video,scanner,adbusers,wireshark $user -s /usr/bin/zsh | passwd
    echo -en "$password\n$password" | passwd "$name"
}

# Setting up a password for the user account (function).
userpass_selector () {
    input_print "Please enter name for a user account (enter empty to not create one): "
    read -r username
    if [[ -z "$username" ]]; then
        return 0
    fi
    input_print "Please enter a password for $username (you're not going to see the password): "
    read -r -s userpass
    if [[ -z "$userpass" ]]; then
        echo
        error_print "You need to enter a password for $username, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password again (you're not going to see it): " 
    read -r -s userpass2
    echo
    if [[ "$userpass" != "$userpass2" ]]; then
        echo
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}

# Setting up a password for the root account (function).
rootpass_selector () {
    input_print "Please enter a password for the root user (you're not going to see it): "
    read -r -s rootpass
    if [[ -z "$rootpass" ]]; then
        echo
        error_print "You need to enter a password for the root user, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password again (you're not going to see it): " 
    read -r -s rootpass2
    echo
    if [[ "$rootpass" != "$rootpass2" ]]; then
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}

# User enters a password for the LUKS Container (function).
lukspass_selector () {
    input_print "Please enter a password for the LUKS container (you're not going to see the password): "
    read -r -s password
    if [[ -z "$password" ]]; then
        echo
        error_print "You need to enter a password for the LUKS Container, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password for the LUKS container again (you're not going to see the password): "
    read -r -s password2
    echo
    if [[ "$password" != "$password2" ]]; then
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}


# Virtualization check (function).
virt_check () {
    hypervisor=$(systemd-detect-virt)
    case $hypervisor in
        kvm )   info_print "KVM has been detected, setting up guest tools."
                pacstrap /mnt qemu-guest-agent &>/dev/null
                systemctl enable qemu-guest-agent --root=/mnt &>/dev/null
                ;;
        vmware  )   info_print "VMWare Workstation/ESXi has been detected, setting up guest tools."
                    pacstrap /mnt open-vm-tools >/dev/null
                    systemctl enable vmtoolsd --root=/mnt &>/dev/null
                    systemctl enable vmware-vmblock-fuse --root=/mnt &>/dev/null
                    ;;
        oracle )    info_print "VirtualBox has been detected, setting up guest tools."
                    pacstrap /mnt virtualbox-guest-utils &>/dev/null
                    systemctl enable vboxservice --root=/mnt &>/dev/null
                    ;;
        microsoft ) info_print "Hyper-V has been detected, setting up guest tools."
                    pacstrap /mnt hyperv &>/dev/null
                    systemctl enable hv_fcopy_daemon --root=/mnt &>/dev/null
                    systemctl enable hv_kvp_daemon --root=/mnt &>/dev/null
                    systemctl enable hv_vss_daemon --root=/mnt &>/dev/null
                    ;;
    esac
}

# Microcode detector (function).
microcode_detector () {
    CPU=$(grep vendor_id /proc/cpuinfo)
    if [[ "$CPU" == *"AuthenticAMD"* ]]; then
        info_print "An AMD CPU has been detected, the AMD microcode will be installed."
        microcode="amd-ucode"
    else
        info_print "An Intel CPU has been detected, the Intel microcode will be installed."
        microcode="intel-ucode"
    fi
}

# Installing the chosen networking method to the system (function).
network_installer () {
    case $network_choice in
        1 ) info_print "Installing and enabling IWD."
            pacstrap /mnt iwd >/dev/null
            systemctl enable iwd --root=/mnt &>/dev/null
            ;;
        2 ) info_print "Installing and enabling NetworkManager."
            pacstrap /mnt networkmanager >/dev/null
            systemctl enable NetworkManager --root=/mnt &>/dev/null
            ;;
        3 ) info_print "Installing and enabling wpa_supplicant and dhcpcd."
            pacstrap /mnt wpa_supplicant dhcpcd >/dev/null
            systemctl enable wpa_supplicant --root=/mnt &>/dev/null
            systemctl enable dhcpcd --root=/mnt &>/dev/null
            ;;
        4 ) info_print "Installing dhcpcd."
            pacstrap /mnt dhcpcd >/dev/null
            systemctl enable dhcpcd --root=/mnt &>/dev/null
    esac
}




# User enters a hostname (function).
hostname_selector () {
    input_print "Please enter the hostname: "
    read -r hostname
    if [[ -z "$hostname" ]]; then
        error_print "You need to enter a hostname in order to continue."
        return 1
    fi
    return 0
}

# User chooses the locale (function).
locale_selector () {
    input_print "Please insert the locale you use (format: xx_XX. Enter empty to use en_GB, or \"/\" to search locales): " locale
    read -r locale
    case "$locale" in
        '') locale="en_GB.UTF-8"
            info_print "$locale will be the default locale."
            return 0;;
        '/') sed -E '/^# +|^#$/d;s/^#| *$//g;s/ .*/ (Charset:&)/' /etc/locale.gen | less -M
                clear
                return 1;;
        *)  if ! grep -q "^#\?$(sed 's/[].*[]/\\&/g' <<< $locale) " /etc/locale.gen; then
                error_print "The specified locale doesn't exist or isn't supported."
                return 1
            fi
            return 0
    esac
}

# User chooses the console keyboard layout (function).
keyboard_selector () {
    input_print "Please insert the keyboard layout to use in console (enter empty to use GB, or \"/\" to look up for keyboard layouts): "
    read -r kblayout
    case "$kblayout" in
        '') kblayout="uk"
            info_print "The standard UK keyboard layout will be used."
            return 0;;
        '/') localectl list-keymaps
             clear
             return 1;;
        *) if ! localectl list-keymaps | grep -Fxq "$kblayout"; then
               error_print "The specified keymap doesn't exist."
               return 1
           fi
        info_print "Changing console layout to $kblayout."
        loadkeys "$kblayout"
        return 0
    esac
}


# Alert user of bad input (function).
error_print () {
    echo -e "${BOLD}${BRED}[ ${BBLUE}•${BRED} ] $1${RESET}"
}




################################################################
#part1
printf '\033c'

if [ -z "$KEYMAP" ]
then
    # Setting up keyboard layout.
    until keyboard_selector; do : ; done   
fi


# Choosing the target for the installation.

if [ -z "$DRIVE" ]
then
    info_print "Available disks for the installation:"
    lsblk -o NAME,SIZE,MOUNTPOINT,FSTYPE,LABEL,FSSIZE,FSAVAIL
    
    PS3="Please select the number of the corresponding disk (e.g. 1): "
    select ENTRY in $(lsblk -dpnoNAME|grep -P "/dev/sd|nvme|vd");
    do
        DRIVE="$ENTRY"
        info_print "Arch Linux will be installed on the following disk: $DRIVE"
        break
    done
fi

if [ -z "$ROOT_PASSWORD" ]
then
    until rootpass_selector; do : ; done
fi

if [ -z "$USER_PASSWORD" ]
then
    until userpass_selector; do : ; done
fi

################# Partition Drive #############################
sgdisk --zap-all $DRIVE
sgdisk --clear

if [ -z $EFI_SIZE]
then
    sgdisk --new=1:0:+500M --typecode=1:ef00 --change-name=1:EFI $DRIVE
else
    sgdisk --new=1:0:${EFI_SIZE} --typecode=1:ef00 --change-name=1:EFI $DRIVE 
fi


sgdisk --new=2:0:+8G --typecode=2:8200 --change-name=2:cryptswap $DRIVE
sgdisk --new=3:0:0 --typecode=3:8300 --change-name=3:cryptsystem $DRIVE

sgdisk -p $DRIVE
sgdisk -v $DRIVE

# Informing the Kernel of the changes.
info_print "Informing the Kernel about the disk changes."
partprobe "$DRIVE"


###############################################################
# Create a section that maps the labels to uuid's
#################### Format and Encrypt #######################
#Format EFI using FAT32 FS
mkfs.fat -F32 -n EFI /dev/disk/by-partlabel/EFI

#Encrypt System Partition
cryptsetup luksFormat --align-payload=8192 -s 256 -c aes-xts-plain64 /dev/disk/by-partlabel/cryptsystem

# Open the luks container so that I can setup the btrfs volumes
cryptsetup open /dev/disk/by-partlabel/cryptsystem system

# Bring up encrypted swap. No hibernate enabled yet
cryptsetup open --type plain --key-file /dev/urandom /dev/disk/by-partlabel/cryptswap swap
mkswap -L swap /dev/mapper/swap
swapon -L swap
###############################################################

######### Create and mount BTRFS subvolumes
mkfs.btrfs --label system /dev/mapper/system

o=defaults,x-mount.mkdir
#o_btrfs=$o,compress=lzo,ssd,noatime
o_btrfs=$o,compress=zstd,noatime,commit=120,space_cache=v2

mount -t btrfs LABEL=system /mnt

btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@opt
btrfs subvolume create /mnt/@snapshots

umount -R /mnt
# Have an aption to put the opt or any other subvolme on hdd if you want to save space on ssd

mount -t btrfs -o subvol=@,$o_btrfs LABEL=system /mnt
mount -t btrfs -o subvol=@home,$o_btrfs LABEL=system /mnt/home
mount -t btrfs -o subvol=@var,$o_btrfs LABEL=system /mnt/var
mount -t btrfs -o subvol=@opt,$o_btrfs LABEL=system /mnt/opt
mount -t btrfs -o subvol=@snapshots,$o_btrfs LABEL=system /mnt/.snapshots

mkdir /mnt/boot
mount LABEL=EFI /mnt/boot

###################################################################

grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf

sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf

#add color to pacman commands 
sed -i "/Color/"'s/^#//' /etc/pacman.conf

#Add multilib repo
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//" /etc/makepkg.conf

# Update Mirrors
pacman -Syy reflector --needed --noconfirm
reflector --verbose --country "$country" --age 12 --latest 10 --sort rate --protocol https --save /etc/pacman.d/mirrorlist
pacman -Syy --noconfirm

pacstrap /mnt base base-devel linux linux-lts linux-firmware btrfs-progs zsh git

genfstab -L -p /mnt >> /mnt/etc/fstab


echo -e "cryptswap\t/dev/disk/by-partlabel/cryptswap\t/dev/urandom\tswap,offset=2048,cipher=aes-xts-plain64,size=256" >> /etc/crypttab


sed '1,/^#part2$/d' `basename $0` > /mnt/arch_install2.sh
chmod +x /mnt/arch_install2.sh
arch-chroot /mnt ./arch_install2.sh -c 
exit 

#part2
printf '\033c'

pacman -S --noconfirm intel-ucode

# Install video drivers if intel graphics is used
pacman -S --noconfirm xf86-video-intel libva-intel-driver --noconfirm

#rm /bin/sh
#ln -s dash /bin/sh
##################################################################

#ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
#timedatectl set-ntp 1
#hwclock --systohc

###################### locales ######################
sed -i "/en_GB.UTF-8 UTF-8/s/^#//" /etc/locale.gen
locale-gen
# 24 hour format
echo 'LC_TIME=en_GB.UTF-8' >> /etc/locale.conf
echo 'KEYMAP=uk' >> /etc/vconsole.conf

localectl set-locale LANG=en_GB.UTF-8

timedatectl set-ntp 1
timedatectl set-timezone $TIMEZONE
hwclock --systohc

# timedatectl list-timezones
#timedatectl set-timezone America/Los_Angeles
#hostnamectl set-hostname $hostname
####################################################

############ Hostname & /etc/hosts #################
# Hostname
hostnamectl set-hostname $hostname

#export hostname='laptop'
#echo "$hostname" > /etc/hostname

#Set up host file
echo -e "\n127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\t${hostname}.localdomain\t$hostname" > /etc/hosts
#####################################################

sed -i '/^HOOKS=/c\HOOKS=(base systemd autodetect sd-vconsole keyboard keymap modconf block sd-encrypt btrfs filesystems resume fsck)' /etc/mkinitcpio.conf
mkinitcpio -p linux
mkinitcpio -p linux-lts


# Setting root password.
info_print "Setting root password."
echo "root:$rootpass" | arch-chroot /mnt chpasswd

# Setting user password.
if [[ -n "$username" ]]; then
    echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/wheel
    info_print "Adding the user $username to the system with root privilege."
    arch-chroot /mnt useradd -m -G wheel -s /bin/bash "$username"
    info_print "Setting user password for $username."
    echo "$username:$userpass" | arch-chroot /mnt chpasswd
fi

# Boot backup hook.
info_print "Configuring /boot backup when pacman transactions are made."
mkdir /mnt/etc/pacman.d/hooks
cat > /mnt/etc/pacman.d/hooks/50-bootbackup.hook <<EOF
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz
[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/rsync -a --delete /boot /.bootbackup
EOF


# Pacman eye-candy features & Paralell Downloads
info_print "Enabling colours, animations, and parallel downloads for pacman."
sed -Ei 's/^#(Color)$/\1\nILoveCandy/;s/^#(ParallelDownloads).*/\1 = 6/' /mnt/etc/pacman.conf


#Add multilib repo
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//" /etc/makepkg.conf


#set_root_password "$ROOT_PASSWORD"
#create_user "$USER_NAME" "$USER_PASSWORD"


#echo "${user}:${password}" | chpasswd

# Let users in wheel group run sudo commands without password for automated paru install
sed -i '/^# %wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /etc/sudoers

git clone https://aur.archlinux.org/paru.git 
cd paru
su -c "makepkg -si" -s /bin/sh $username
cd /root/Nescafe-ArchInstall
rm -r paru

sed -i "s/^#BottomUp$/BottomUp/" /etc/paru.conf


# Most important command! Get rid of the beep!
rmmod pcspkr
echo "blacklist pcspkr" >/etc/modprobe.d/nobeep.conf



pacman -S --noconfirm grub grub-btrfs snapper snap-pac efibootmgr
grub-install --target=x86_64-efi --bootloader-id=Arch --efi-directory=/mnt/boot --root-directory=/mnt $DRIVE
grub-mkconfig -o /mnt/boot/grub/grub.cfg

# Setting up LUKS2 encryption in grub.
info_print "Setting up grub config."
BTRFS="/dev/mapper/cryptroot"
UUID=$(blkid -s UUID -o value $system)
sed -i "\,^GRUB_CMDLINE_LINUX=\"\",s,\",&rd.luks.name=${UUID}=system root=$BTRFS," /etc/default/grub


# Enabling various services.
info_print "Enabling Reflector, automatic snapshots, BTRFS scrubbing and systemd-oomd."
services=(reflector.timer snapper-timeline.timer snapper-cleanup.timer btrfs-scrub@-.timer btrfs-scrub@home.timer btrfs-scrub@var-log.timer btrfs-scrub@\\x2esnapshots.timer grub-btrfs.path systemd-oomd)
for service in "${services[@]}"; do
    systemctl enable "$service" --root=/mnt &>/dev/null
done



# Reconfigure sudo, so that a password is need to elevate privileges.
sed -i '/^# %wheel ALL=(ALL) ALL/s/# //' /etc/sudoers # Uncomment line with sed
sed -i '/^%wheel ALL=(ALL) NOPASSWD: ALL/s/^/# /' /etc/sudoers # Comment line with sed



echo "Script has finished"


echo -e "Do you want to change your ROOT password"


#systemctl enable NetworkManager.service 
#systemctl enable sshd
